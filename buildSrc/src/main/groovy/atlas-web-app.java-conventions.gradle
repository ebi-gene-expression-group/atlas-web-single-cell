plugins {
  id 'java'
  id 'jacoco'
}

group = 'uk.ac.ebi.ge'
version = '1.0.0'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
  mavenCentral()
  // For patched version of SolrJ (see dependencies below) and ae-efo-loader
  // Ideally mavenLocal() would be the last repo to have as fallback, but we won’t have access to our Artifactory
  // unless we’re on the VPN, in which case the build fails
  mavenLocal()
  maven {
    url "http://193.62.54.19:30007/artifactory/maven-local/"
    allowInsecureProtocol true
  }
}

dependencies {
  implementation 'javax.inject:javax.inject:1'
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  // Needs to match Tomcat version https://tomcat.apache.org/whichversion.html
  implementation 'javax.servlet:javax.servlet-api:3.1.0'

  implementation 'org.springframework:spring-context:5.1.5.RELEASE'
  implementation 'org.springframework:spring-jdbc:5.1.5.RELEASE'
  implementation 'org.springframework:spring-web:5.1.5.RELEASE'
  implementation 'org.springframework:spring-webmvc:5.1.5.RELEASE'

  // jackson-databind is required by RestTemplate included in Spring ¯\_(ツ)_/¯
  implementation enforcedPlatform('com.fasterxml.jackson:jackson-bom:2.10.0')
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.core:jackson-core'

  implementation 'au.com.bytecode:opencsv:2.4'
  implementation 'io.atlassian.util.concurrent:atlassian-util-concurrent:4.0.1'

  implementation 'org.postgresql:postgresql:42.2.5.jre7' //Only in core?

  implementation 'org.jetbrains:annotations:17.0.0'
  implementation 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.200'

  implementation 'com.google.guava:guava:27.1-jre'

  implementation 'com.google.auto.value:auto-value-annotations:1.6.2'
  annotationProcessor 'com.google.auto.value:auto-value:1.6.2'

  implementation 'com.google.code.gson:gson:2.8.5'
  implementation 'com.jayway.jsonpath:json-path:2.4.0'

  implementation 'org.apache.commons:commons-lang3:3.8.1'
  implementation 'org.apache.commons:commons-text:1.6'
  implementation 'org.apache.commons:commons-math:2.2'

  implementation 'org.slf4j:slf4j-api:1.7.26'
  implementation 'ch.qos.logback:logback-core:1.2.3'
  implementation 'ch.qos.logback:logback-classic:1.2.3'

  // Nasty bug in HttpClient 4.5.3 (bundled with Solr 7.1.0)
  // https://issues.apache.org/jira/browse/HTTPCLIENT-1831
  implementation 'org.apache.httpcomponents:httpclient:4.5.8'
  // We’re using a patched version of SolrJ in which QueryRequest uses POST instead of GET to avoid erros due to very
  // long (i.e. unparseable) URIs. You need to install this on your local Maven repository: see mavenLocal() above
  implementation ('org.apache.solr:solr-core:7.1.0-QUERY_REQUEST_WITH_POST') {
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
  }
  // solr-core includes/depends on solrj, but if we don’t explicitly set a version Gradle will pull 8.5.2
  implementation 'org.apache.solr:solr-solrj:7.1.0-QUERY_REQUEST_WITH_POST'


  testImplementation 'org.springframework:spring-test:5.1.5.RELEASE'
  testImplementation 'com.h2database:h2:1.4.199'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.1'
  testImplementation 'org.mockito:mockito-core:2.25.1'
  testImplementation 'org.mockito:mockito-junit-jupiter:2.25.1'
  testImplementation 'org.assertj:assertj-core:3.11.1'
  testImplementation 'org.assertj:assertj-guava:3.2.0'
  testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'

  testImplementation platform('org.junit:junit-bom:5.6.0')
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

processTestResources {
  filesMatching('configuration.properties') {
    expand(
            dataFilesLocation: project.hasProperty('dataFilesLocation') ? dataFilesLocation : "${System.env.ATLAS_DATA_PATH}",
            experimentFilesLocation: project.hasProperty('experimentFilesLocation') ? experimentFilesLocation : "${System.env.ATLAS_DATA_PATH}/scxa",
            buildNumber: project.hasProperty('buildNumber') ? buildNumber : '42',
            buildBranch: project.hasProperty('buildBranch') ? buildBranch : 'dev',
            buildRevision: project.hasProperty('buildRevision') ? buildRevision : 'dev',
            tomcatHostname: project.hasProperty('tomcatHostname') ? tomcatHostname : 'localhost'
    )
  }

  filesMatching('solr.properties') {
    expand(
            zkHost: project.hasProperty('zkHost') ? zkHost : 'localhost',
            zkPort: project.hasProperty('zkPort') ? zkPort : '2181',
            solrHost: project.hasProperty('solrHost') ? solrHost : 'localhost',
            solrPort: project.hasProperty('solrPort') ? solrPort : '8983'
    )
  }

  filesMatching('jdbc.properties') {
    expand(
            jdbcUrl: project.hasProperty('jdbcUrl') ? jdbcUrl : 'jdbc:postgresql://localhost:5432/gxpscxadev',
            jdbcUsername: project.hasProperty('jdbcUsername') ? jdbcUsername : 'atlasprd3',
            jdbcPassword: project.hasProperty('jdbcPassword') ? jdbcPassword : 'atlasprd3'
    )
  }

  filesMatching('logback-test.xml') {
    expand(
            buildDir: buildDir,
            testLogs: project.hasProperty('testLogs') ? testLogs : 'STDOUT',
    )
  }
}

test {
  if (project.hasProperty('testResultsPath')) {
    reporting.baseDir = "${buildDir}/reports/" + project.property('testResultsPath')
    testResultsDirName = "${buildDir}/test-results/" + project.property('testResultsPath')

    jacoco {
      destinationFile = file("${buildDir}/jacoco/${project.property('testResultsPath')}.exec")
    }
  }

  if (project.hasProperty('excludeTests')) {
    exclude project.property('excludeTests')
  }

  testLogging {
    outputs.upToDateWhen {false}
    showStandardStreams = true
  }

  useJUnitPlatform()
  maxHeapSize = '4096m'
}

jacocoTestReport {
  executionData.setFrom fileTree(dir: "${buildDir}/jacoco", include: '*.exec' )

  reports {
    html.destination file("${buildDir}/jacoco/html")
  }
}
