plugins {
  id 'java'
  id 'jacoco'
}

group = 'uk.ac.ebi.ge'
version = '16.0.0'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    url "http://45.88.81.166/artifactory/maven-local/"
    allowInsecureProtocol true
  }
  // For ae-efo-loader
  // Ideally mavenLocal() would be the last repo to have as fallback, but we won’t have access to our Artifactory
  // unless we’re on the VPN, in which case the build fails
}

dependencies {
  implementation 'javax.inject:javax.inject:1'
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  // Needs to match Tomcat version https://tomcat.apache.org/whichversion.html
  implementation 'javax.servlet:javax.servlet-api:3.1.0'

  // jackson-databind is required by RestTemplate included in Spring ¯\_(ツ)_/¯
  implementation enforcedPlatform('com.fasterxml.jackson:jackson-bom:2.10.0')
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.core:jackson-core'

  implementation 'au.com.bytecode:opencsv:2.4'
  implementation 'io.atlassian.util.concurrent:atlassian-util-concurrent:4.0.1'

  implementation 'org.postgresql:postgresql:42.5.0'

  implementation 'org.jetbrains:annotations:17.0.0'
  implementation 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.200'

  implementation 'com.google.guava:guava:27.1-jre'

  implementation 'com.google.auto.value:auto-value-annotations:1.6.2'
  annotationProcessor 'com.google.auto.value:auto-value:1.6.2'

  implementation 'com.google.code.gson:gson:2.8.5'
  implementation 'com.jayway.jsonpath:json-path:2.4.0'

  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.6'
  implementation 'org.apache.commons:commons-math:2.2'
  implementation 'commons-io:commons-io:2.10.0'

  implementation 'org.slf4j:slf4j-api:1.7.26'
  implementation 'ch.qos.logback:logback-core:1.2.3'
  implementation 'ch.qos.logback:logback-classic:1.2.3'

  implementation ('org.apache.solr:solr-core:8.7.0') {
    exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
  }

  implementation 'org.projectlombok:lombok:1.18.20'

  testImplementation 'org.springframework:spring-test:5.1.5.RELEASE'
  testImplementation 'com.h2database:h2:1.4.199'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.1'
  testImplementation 'org.mockito:mockito-core:5.2.0'
  testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
  testImplementation 'org.assertj:assertj-core:3.11.1'
  testImplementation 'org.assertj:assertj-guava:3.2.0'
  testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'

  testImplementation platform('org.junit:junit-bom:5.6.0')
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  // For JUnit 4 tests in atlas-web-core
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
  testImplementation 'junit:junit:4.12'
}

processTestResources {
  filesMatching('configuration.properties') {
    expand(
            dataFilesLocation: dataFilesLocation,
            experimentFilesLocation: experimentFilesLocation,
            experimentDesignLocation: experimentDesignLocation,
            buildNumber: project.findProperty('buildNumber') ?: '42',
            buildBranch: project.findProperty('buildBranch') ?: 'dev',
            buildRevision: project.findProperty('buildRevision') ?: 'dev',
            tomcatHostname: project.findProperty('tomcatHostname') ?: 'localhost'
    )
  }

  filesMatching('solr.properties') {
    expand(
            zkHosts: project.findProperty('zkHosts') ?: 'localhost',
            solrHosts: project.findProperty('solrHosts') ?: 'localhost',
            solrUser: project.findProperty('solrUser') ?: '',
            solrPassword: project.findProperty('solrPassword') ?: '',
    )
  }

  filesMatching('jdbc.properties') {
    expand(
            jdbcUrl: jdbcUrl,
            jdbcUsername: jdbcUsername,
            jdbcPassword: jdbcPassword
    )
  }

  filesMatching('logback-test.xml') {
    expand(
            buildDir: buildDir,
            testLogs: project.findProperty('testLogs') ?: 'STDOUT',
    )
  }
}

test {
  if (project.hasProperty('solrUser') && project.hasProperty('solrPassword')) {
    jvmArgs '-Dsolr.httpclient.builder.factory=org.apache.solr.client.solrj.impl.PreemptiveBasicAuthClientBuilderFactory',
            "-Dbasicauth=${project.property('solrUser') ?: ''}:${project.property('solrPassword') ?: ''}"

  }

  if (project.hasProperty('remoteDebug')) {
    jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
  }

  if (project.hasProperty('excludeTests')) {
    exclude project.property('excludeTests')
  }

  if (project.hasProperty('testResultsPath')) {
    testReportDirName = project.property('testResultsPath')
    testResultsDirName = project.property('testResultsPath')

    jacoco {
      destinationFile = file("${buildDir}/jacoco/${project.property('testResultsPath')}.exec")
    }
  }

  testLogging {
    outputs.upToDateWhen {false}
    showStandardStreams = true
    events 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR'
  }

  useJUnitPlatform()
  maxHeapSize = '4096m'
}

jacocoTestReport {
  executionData.setFrom fileTree(dir: "${buildDir}/jacoco", include: '*.exec' )
  reports {
    html.outputLocation = layout.buildDirectory.dir("reports/jacoco")
  }
}
